exit
d.errors.messages[:shipments]e
d.errors.messages.shipments
d.errors.messages
d.errors
continue
exit
original_manifest
exit
original_lis
exit
original_lis
manifest_compare(original_lis)
exit
manifest_compare(original_lis)
manifest_compare(added_lis)
added_lis
exit
sh1.line_items.map { |li| [li.product_id, li.quantity] }
sh1.line_items
continue
Shipment.last(2).map(&:line_items).flatten
Shipment.last(2).map(&:line_items).first.first
Shipment.last(2).map(&:line_items).first
Shipment.last(2).map(&:line_items)
Shipment.first.map(&:line_items)
Shipment.all
Shipment.last(2).map(&:line_items)
Shipment.last(2).line_items
Shipment.last(2).line_itesm
Shipment.last(2)
line_item_pairs
line_item_pars
exit
arr = []
sh1.line_items.each { |l| arr.push[l
[1,2] === [1,2]
[1,2] == [1,2]
other = Struct.new(1,2)
o1 = { :1 => 2}
o1 = { 1: 2, 2: 1}
sh1.line_items
exit
sh1
sh1.line_items
Shipment.all
exit
Shipment.find(1)
Shipment.all
shipment
continue
shipment
continue
line_items.length
inventory_matched
continue
shipment
continue
shipment
continue
shipment
continue
shipment
continue
shipment
wh
sh
continue
exit
continue
d.assign(sh4)
Inventory.all.map(&:quantity)
Inventory.all
continue
sh4
continue
sh4
Inventory.all
continue
Inventory.all
continue
nearest
continue
nearest
zip
continue
nearest
continue
nearest
continue
nearest
continue
zip
nearest
continue
nearest
continue
zip
nearest
exit
continue
potential_wh.size
continue
potential_wh.size
potential_wh
continue
nearest
exit
potential_wh
continue
potential_wh
potential
continue
wh
continue
wh.id
shipment
wh.inventory
wh
li
line_items.length
line_items
inventory_matched
continue
nearest
exit
nearest
continue
zip
nearest
exit
decrement_zip("09999")
decrement_zip("19999")
decrement_zip("29999")
decrement_zip("59999")
decrement_zip("99999")
decrement_zip("90000")
down_closest_wh
nearest
continue
nearest
continue
nearest
exit
continue
contine
potential_wh.bsearch { |wh| wh.zip >= "80001" }
potential_wh.bsearch { |wh| wh.zip >= "90001" }
potential_wh.bsearch { |wh| wh.zip >= "90001 }
potential_wh.bsearch { |wh| wh.zip >= "90000" }
potential_wh.bsearch { |wh| wh.zip >= zip }
potential_wh.bsearch { |wh| wh.zip <= "70000" }
potential_wh.bsearch { |wh| wh.zip < "70000" }
potential_wh.map(&:zip)
potential_wh
potential_wh.bsearch { |wh| wh.zip <= "70000" }
potential_wh.bsearch { |wh| wh.zip <= "60000" }
potential_wh.bsearch { |wh| wh.zip <= "0000" }
potential_wh.bsearch { |wh| wh.zip <= "80000" }
potential_wh.bsearch { |wh| wh.zip <= "90000" }
zip
potential_wh.bsearch { |wh| wh.zip <= zip }
potential_wh.bsearch { |wh| wh.zip < zip }
potential_wh.bsearch { |wh| wh.zip >= zip }
potential_wh.bsearch { |wh| zip <= wh.zip }
"00203".to_i
"60060".to_i
zip
wh
potential_wh.bsearch { |wh| wh.zip < zip }
potential_wh.bsearch { |wh| zip <= wh.zip }
potential_wh.bsearch { |wh| wh.zip <= zip }
potential_wh
                wh.zip <= zip
            down_closest_wh = potential_wh.bsearch do |wh|
zip
down_closest_wh
continue
wh
continue
wh
continue
wh
continue
wh
continue
potential_wh.size
continue
potential_wh.size
continue
exit
potential_wh
potential_wh.delete_if { |s| s == wh }
potential_wh.delete(wh)
potential_wh
potential_wh - [wh]
potential_wh - wh
[1,2,3].delete(3)
[1,2,3].delete(4)
potential_wh
wh
potential_wh.delete(wh)
potential_wh.size
continue
potential_wh.size
potential_wh
continue
exit
line_items
li
wh
nearest
wh
potential_wh
continue
inventory_matched
li
continue
line_items.length
inventory_matched
continue
exit
inv
continue
nearest
continue
Inventory.all
Inventory
sh1.line_items
sh1
continue
nearest
inventory_matched += 1
inventory_matched++
inventory_matched
inv.quantity >= li.quantity
inv.quantity
inv.quanity
inv
continue
contine
exit
wh
wh.inventory
inv
continue
line_items
continue
Shipment.first
li
shipment.line_items
shipment
line_items
continue
potential_wh
line_item.each
